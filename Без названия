package main

import (
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

// Глобальные переменные
var (
	bot       *tgbotapi.BotAPI
	userState = make(map[int64]string)
)

type user_Answer struct {
	Name  string
	Age   int
	About string
	City  string
}

var answer = make(map[int64]*user_Answer)

// Пример структуры для кнопок
type button struct {
	name string
	data string
}

// Главное меню
func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "Подсчет калорий", data: "calorie"},
		{name: "Тренировка", data: "traine"},
		{name: "Профиль", data: "profile"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// Меню "Тренировка"
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "Тренировка: лёгкий уровень", data: "Light"},
		{name: "Тренировка: средний уровень", data: "Midle"},
		{name: "Тренировка: сложный уровень", data: "Hard"},
		{name: "Назад", data: "back"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func anketaid(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// Инициализация анкеты для нового пользователя
	if answer[chatID] == nil {
		answer[chatID] = &user_Answer{}
	}

	switch userState[chatID] {
	case "ASK_NAME":
		answer[chatID].Name = text
		userState[chatID] = "ASK_AGE"
		sendText(chatID, "Сколько вам лет?")

	case "ASK_AGE":
		age, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "Ошибка: введите число, пожалуйста")
			return
		}
		answer[chatID].Age = age
		userState[chatID] = "ASK_CITY"
		sendText(chatID, "Из какого вы города?")

	case "ASK_CITY":
		answer[chatID].City = text

		// Пример: если город — Москва
		if strings.EqualFold(answer[chatID].City, "Москва") {
			sendText(chatID, "Отлично! Можете записаться на тренировки в World Class:\nhttps://special.worldclass.ru/new/clubs/simvol")
		}

		userState[chatID] = "ASK_ABOUT"
		sendText(chatID, "Расскажите о себе")

	case "ASK_ABOUT":
		answer[chatID].About = text
		userState[chatID] = ""
		sendText(chatID, "Спасибо! Ваши данные сохранены. Вы можете посмотреть их в «Профиль».")
	}
}

// Основная функция
func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (it's okay if you have token in another place)")
	}

	botToken := os.Getenv("TG_BOT_API")
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("Failed to initialize Telegram bot API: %v", err)
	}

	// Настройка получения обновлений
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("Failed to get updates channel: %v", err)
	}

	// Главный цикл обработки обновлений
	for update := range updates {
		// Обрабатываем колбэки от инлайн-кнопок
		if update.CallbackQuery != nil {
			callbacks(update)
			continue
		}

		// Обрабатываем входящие сообщения
		if update.Message != nil {
			if update.Message.IsCommand() {
				commands(update)
			} else {
				// Если пользователь в анкете, передаем в anketaid
				switch userState[update.Message.Chat.ID] {
				case "ASK_NAME", "ASK_AGE", "ASK_CITY", "ASK_ABOUT":
					anketaid(update)
				default:
					handleUserText(update)
				}
			}
		}
	}
}

// Функция обработки колбэков
func callbacks(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	switch data {
	case "check":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		bot.Send(del)

		ans, exist := answer[chatID]
		if !exist || ans.Name == "" {
			sendText(chatID, "Вы ещё не заполняли анкету. Нажмите «Создать профиль» в меню.")
			return
		}

		msgText := "Ваш профиль:\n"
		msgText += "Имя: " + ans.Name + "\n"
		if ans.Age > 0 {
			msgText += "Возраст: " + strconv.Itoa(ans.Age) + "\n"
		} else {
			msgText += "Возраст: не указан\n"
		}
		if ans.City != "" {
			msgText += "Город: " + ans.City + "\n"
		} else {
			msgText += "Город: не указан\n"
		}
		if ans.About != "" {
			msgText += "О себе: " + ans.About + "\n"
		} else {
			msgText += "О себе: не указано\n"
		}

		sendText(chatID, msgText)

	case "profile":
		userState[chatID] = "ASK_NAME"
		answer[chatID] = &user_Answer{}
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		bot.Send(del)
		sendText(chatID, "Здравствуйте! Пожалуйста, заполните анкету.\nКак вас зовут?")

	case "traine":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		bot.Send(del)
		msg := tgbotapi.NewMessage(chatID, "Это список тренировок по уровням:")
		msg.ReplyMarkup = traineMenu()
		bot.Send(msg)

	case "back":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		bot.Send(del)
		msg := tgbotapi.NewMessage(chatID, "Вы в главном меню:")
		msg.ReplyMarkup = startMenu()
		bot.Send(msg)

	case "Light":
		sendText(chatID, "Вы выбрали лёгкий уровень")

	case "Midle":
		sendText(chatID, "Вы выбрали средний уровень")

	case "Hard":
		sendText(chatID, "Вы выбрали сложный уровень")
	}
}

// Обработка команд /start, /help, /train и т.п.
func commands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	switch update.Message.Command() {
	case "start":
		msg :=